From 6971e4d09599720e6ebeb18a970c0facfb42eae3 Mon Sep 17 00:00:00 2001
From: Stephen <UsamUNX>
Date: Sun, 24 Mar 2024 22:33:42 +0300
Subject: [PATCH 6/7] feat client.py: add attack actions

---
 20240318/1/client.py | 79 ++++++++++++++++++++++++++++++++------------
 20240318/1/server.py | 39 +---------------------
 2 files changed, 59 insertions(+), 59 deletions(-)

diff --git a/20240318/1/client.py b/20240318/1/client.py
index 83fd3f5..14fd0bd 100644
--- a/20240318/1/client.py
+++ b/20240318/1/client.py
@@ -18,6 +18,12 @@ addmon_errors = {
     '10': 'Invalid arguments (value of coord y)'
 }
 
+weapons = {
+'sword': 10,
+'spear': 15,
+'axe'  : 20
+}
+
 custom_monster = cowsay.read_dot_cow(io.StringIO("""
 $the_cow = <<EOC;
          $thoughts
@@ -53,11 +59,22 @@ def addmon_answer(code, name = None, x = None, y = None, msg = None, replace_che
     if replace_check:
         print(replace_check)
 
+def attack_answer(name, code, dmg = None, hp = None):
+    if code == '1':
+        print(f'No {name} here')
+        return
+
+    print(f'Attacked {name}, damage {dmg} hp')
+
+    if hp != '0':
+        print(f'{name} now has {hp}')
+    else:
+        print(f'{name} died')
+
 
 class  MUDcmd(cmd.Cmd):
 
     def __init__(self, socket):
-        # self.game = Game()
         self.field_size = 10
         self.socket = socket
         print("<<< Welcome to Python-MUD 0.1 >>>")
@@ -74,7 +91,7 @@ class  MUDcmd(cmd.Cmd):
     
     def do_up(self, args):
         'one step UP on field'
-        # self.game.move('up', args)
+        
         self.socket.sendall(f'move up'.encode())
         response = self.socket.recv(1024).rstrip().decode()
         response = shlex.split(response)
@@ -82,7 +99,7 @@ class  MUDcmd(cmd.Cmd):
     
     def do_down(self, args):
         'one step DOWN on field'
-        # self.game.move('down', args)
+        
         self.socket.sendall(f'move down'.encode())
         response = self.socket.recv(1024).rstrip().decode()
         response = shlex.split(response)
@@ -90,7 +107,7 @@ class  MUDcmd(cmd.Cmd):
     
     def do_left(self, args):
         'one step LEFT on field'
-        # self.game.move('left', args)
+        
         self.socket.sendall(f'move left'.encode())
         response = self.socket.recv(1024).rstrip().decode()
         response = shlex.split(response)
@@ -98,7 +115,7 @@ class  MUDcmd(cmd.Cmd):
     
     def do_right(self, args):
         'one step RIGHT on field'
-        # self.game.move('right', args)
+        
         self.socket.sendall(f'move right'.encode())
         response = self.socket.recv(1024).rstrip().decode()
         response = shlex.split(response)
@@ -116,8 +133,7 @@ class  MUDcmd(cmd.Cmd):
         2. hp <int[0...inf)>
         3. hello <string (with quotation for more than one word)>
         '''
-        # self.game.addmon(args)
-
+        
         args = shlex.split(args)
         broken = False
 
@@ -184,21 +200,42 @@ class  MUDcmd(cmd.Cmd):
             addmon_answer(*response)
 
 
-    # def do_attack(self, args):
-    #     'Attack the monster in current position'
-
-    #     self.game.attack(args)
+    def do_attack(self, args):
+        'Attack the monster in current position'
 
-    # def complete_attack(self, text, line, begidx, endidx):
-    #     words = (line[:endidx] + ".").split()
-    #     DICT = []
-    #     match len(words):
-    #         case 2:
-    #             DICT = cowsay.list_cows() + ['jgsbat']
-    #         case 4:
-    #             if words[2].startswith('with'):
-    #                 DICT = self.game.player.weapons.keys()
-    #     return [c for c in DICT if c.startswith(text)]
+        weapon = None
+        args = shlex.split(args)
+        
+        match args:
+            case [name, 'with', weapon_type]:
+                if weapon_type not in weapons.keys():
+                    print('client: Unknown weapon')
+                else:
+                    weapon = {'type'  : weapon_type,
+                              'damage': weapons[weapon_type]}
+            case [name]:
+                weapon = {'type'  : 'sword',
+                          'damage': weapons['sword']}
+            case _:
+                print('client: Invalid command')
+
+        if weapon:
+            self.socket.sendall(f'attack {args[0]} {weapon["damage"]}'.encode())
+            response = self.socket.recv(1024).rstrip().decode()
+            response = shlex.split(response)
+            attack_answer(args[0], *response)
+
+
+    def complete_attack(self, text, line, begidx, endidx):
+        words = (line[:endidx] + ".").split()
+        DICT = []
+        match len(words):
+            case 2:
+                DICT = cowsay.list_cows() + ['jgsbat']
+            case 4:
+                if words[2].startswith('with'):
+                    DICT = weapons.keys()
+        return [c for c in DICT if c.startswith(text)]
 
 
 
diff --git a/20240318/1/server.py b/20240318/1/server.py
index 69b4e43..ec78319 100644
--- a/20240318/1/server.py
+++ b/20240318/1/server.py
@@ -90,7 +90,6 @@ class Game:
         position = self.player.move(method, args)
 
         print(f'Moved to ({position[0]}, {position[1]})')
-        # response.append(f'Moved to ({position[0]}, {position[1]})')
         response.append(str(position[0]))
         response.append(str(position[1]))
 
@@ -114,20 +113,17 @@ class Game:
             broken = True
             print('Invalid arguments (count of elements)')
             response.append('1')
-            # response.append('Invalid arguments (count of elements)')
 
         elif not isinstance(args[0], str):
             broken = True
             print('Invalid arguments (type of name)')
             response.append('2')
-            # response.append('Invalid arguments (type of name)')
 
         elif args[0] not in cowsay.list_cows() \
                 and args[0] != 'jgsbat':
             broken = True
             print('Cannot add unknown monster')
             response.append('3')
-            # response.append('Cannot add unknown monster')
         else:
             monster = {"name": args[0]}
 
@@ -138,7 +134,6 @@ class Game:
                             broken = True
                             print('Invalid arguments (type of message)')
                             response.append('4')
-                            # response.append('Invalid arguments (type of message)')
                             break
                         monster["message"] = args[i+1]
                     case 'hp':
@@ -146,13 +141,11 @@ class Game:
                             broken = True
                             print('Invalid arguments (type of hp)')
                             response.append('5')
-                            # response.append('Invalid arguments (type of hp)')
                             break
                         if int(args[i+1]) <= 0:
                             broken = True
                             print('Invalid arguments (value of hp)')
                             response.append('6')
-                            # response.append('Invalid arguments (value of hp)')
                             break
                         monster["hp"] = int(args[i+1])
                     case 'coord':
@@ -160,27 +153,23 @@ class Game:
                             broken = True
                             print('Invalid arguments (type of coord x')
                             response.append('7')
-                            # response.append('Invalid arguments (type of coord x')
                             break
                         if int(args[i+1]) < 0 \
                                 or int(args[i+1]) >= self.field_size:
                             broken = True
                             print('Invalid arguments (value of coord x)')
                             response.append('8')
-                            # response.append('Invalid arguments (value of coord x)')
                             break
                         if not args[i+2].isdigit():
                             broken = True
                             print('Invalid arguments (type of coord y')
                             response.append('9')
-                            # response.append('Invalid arguments (type of coord y')
                             break
                         if int(args[i+2]) < 0 \
                                 or int(args[i+2]) >= self.field_size:
                             broken = True
                             print('Invalid arguments (value of coord y)')
                             response.append('10')
-                            # response.append('Invalid arguments (value of coord y)')
                             break
                         m_x = int(args[i+1])
                         m_y = int(args[i+2])
@@ -193,7 +182,6 @@ class Game:
             response.append(str(m_x))
             response.append(str(m_y))
             response.append(monster["message"])
-            # response.append(f'Added monster {monster["name"]} to ({m_x}, {m_y}) saying {monster["message"]}')
             
             key = self.key((m_x, m_y))
             if self.monsters.setdefault(key, None) != None:
@@ -209,47 +197,22 @@ class Game:
         response = []
         position = self.player.position()
         key = self.key(position)
-        weapon = None
         args = shlex.split(args)
         
         if self.monsters.setdefault(key, None) == None \
         or self.monsters[key].name != args[0]:
             print(f'No {args[0]} here')
             response.append('1')
-            response.append(f'No {args[0]} here')
             return response
 
-        match args:
-            case [name, 'with', weapon_type]:
-                if weapon_type not in self.player.weapons.keys():
-                    print('Unknown weapon')
-                    response.append('2')
-                    response.append('Unknown weapon')
-                else:
-                    weapon = {'type'  : weapon_type,
-                              'damage': self.player.weapons[weapon_type]}
-            case [name]:
-                weapon = {'type'  : 'sword',
-                          'damage': self.player.weapons['sword']}
-            case _:
-                print('Invalid command')
-                response.append('3')
-                response.append('Invalid command')
-
-        if not weapon:
-            return response
-
-        name, dmg, hp = self.monsters[key].damage(weapon['damage'])
+        name, dmg, hp = self.monsters[key].damage(int(args[1]))
         print(f'Attacked {name},  damage {dmg} hp')
         response.append('0')
-        response.append(f'Attacked {name},  damage {dmg} hp')
         
         if hp:
             print(f'{name} now has {hp}')
-            response.append(f'{name} now has {hp}')
         else:
             print(f'{name} died')
-            response.append(f'{name} died')
             del self.monsters[key]
 
         response.append(str(dmg))
-- 
2.34.1

