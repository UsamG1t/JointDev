From 1f058a0014a50c6ce126e26b297ff58e056763e4 Mon Sep 17 00:00:00 2001
From: Stephen <UsamUNX>
Date: Sun, 24 Mar 2024 22:06:11 +0300
Subject: [PATCH 5/7] feat client.py: add addmon actions

---
 20240318/1/client.py | 109 +++++++++++++++++++++++++++++++++++++++----
 20240318/1/server.py |  27 ++++++-----
 2 files changed, 115 insertions(+), 21 deletions(-)

diff --git a/20240318/1/client.py b/20240318/1/client.py
index c74778f..83fd3f5 100644
--- a/20240318/1/client.py
+++ b/20240318/1/client.py
@@ -5,6 +5,19 @@ import socket
 import shlex
 import cowsay
 
+addmon_errors = {
+    '1' : 'Invalid arguments (count of elements)',
+    '2' : 'Invalid arguments (type of name)', 
+    '3' : 'Cannot add unknown monster', 
+    '4' : 'Invalid arguments (type of message)', 
+    '5' : 'Invalid arguments (type of hp)', 
+    '6' : 'Invalid arguments (value of hp)', 
+    '7' : 'Invalid arguments (type of coord x', 
+    '8' : 'Invalid arguments (value of coord x)', 
+    '9' : 'Invalid arguments (type of coord y', 
+    '10': 'Invalid arguments (value of coord y)'
+}
+
 custom_monster = cowsay.read_dot_cow(io.StringIO("""
 $the_cow = <<EOC;
          $thoughts
@@ -31,11 +44,21 @@ def move_answer(x, y, name=None, message=None):
         else:
             print(cowsay.cowsay(message, cow=name))
 
+def addmon_answer(code, name = None, x = None, y = None, msg = None, replace_check=None):
+    if code != '0':
+        print(addmon_errors[code])
+        return
+
+    print(f'Added monster {name} to ({x}, {y}) saying {msg}')
+    if replace_check:
+        print(replace_check)
+
 
 class  MUDcmd(cmd.Cmd):
 
     def __init__(self, socket):
         # self.game = Game()
+        self.field_size = 10
         self.socket = socket
         print("<<< Welcome to Python-MUD 0.1 >>>")
         return super().__init__()
@@ -81,19 +104,85 @@ class  MUDcmd(cmd.Cmd):
         response = shlex.split(response)
         move_answer(*response)
     
-    # def do_addmon(self, args):
-    #     '''
-    #     Add monster on the position
+    def do_addmon(self, args):
+        '''
+        Add monster on the position
 
-    #     first argument is a name of monster from [cowsay.list_cows() | 'jgsbat']
+        first argument is a name of monster from [cowsay.list_cows() | 'jgsbat']
 
-    #     Other required args (their order is not important):
+        Other required args (their order is not important):
         
-    #     1. coord <int[0...field_size)> <int[0...field_size)>
-    #     2. hp <int[0...inf)>
-    #     3. hello <string (with quotation for more than one word)>
-    #     '''
-    #     self.game.addmon(args)
+        1. coord <int[0...field_size)> <int[0...field_size)>
+        2. hp <int[0...inf)>
+        3. hello <string (with quotation for more than one word)>
+        '''
+        # self.game.addmon(args)
+
+        args = shlex.split(args)
+        broken = False
+
+        if len(args) != 8:
+            broken = True
+            print('client: Invalid arguments (count of elements)')
+
+        elif not isinstance(args[0], str):
+            broken = True
+            print('client: Invalid arguments (type of name)')
+
+        elif args[0] not in cowsay.list_cows() \
+                and args[0] != 'jgsbat':
+            broken = True
+            print('client: Cannot add unknown monster')
+
+        else:
+            monster = {"name": args[0]}
+
+            for i in range(1, len(args)):
+                match args[i]:
+                    case 'hello':
+                        if not isinstance(args[i+1], str):
+                            broken = True
+                            print('client: Invalid arguments (type of message)')
+                            break
+                        monster["message"] = args[i+1]
+                    case 'hp':
+                        if not args[i+1].isdigit():
+                            broken = True
+                            print('client: Invalid arguments (type of hp)')
+                            break
+                        if int(args[i+1]) <= 0:
+                            broken = True
+                            print('client: Invalid arguments (value of hp)')
+                            break
+                        monster["hp"] = int(args[i+1])
+                    case 'coord':
+                        if not args[i+1].isdigit():
+                            broken = True
+                            print('client: Invalid arguments (type of coord x')
+                            break
+                        if int(args[i+1]) < 0 \
+                                or int(args[i+1]) >= self.field_size:
+                            broken = True
+                            print('client: Invalid arguments (value of coord x)')
+                            break
+                        if not args[i+2].isdigit():
+                            broken = True
+                            print('client: Invalid arguments (type of coord y')
+                            break
+                        if int(args[i+2]) < 0 \
+                                or int(args[i+2]) >= self.field_size:
+                            broken = True
+                            print('client: Invalid arguments (value of coord y)')
+                            break
+                        m_x = int(args[i+1])
+                        m_y = int(args[i+2])
+                    case _: continue
+        if not broken:
+            self.socket.sendall(f'addmon {monster["name"]} hp {monster["hp"]} coord {m_x} {m_y} hello "{monster["message"]}"'.encode())
+            response = self.socket.recv(1024).rstrip().decode()
+            response = shlex.split(response)
+            addmon_answer(*response)
+
 
     # def do_attack(self, args):
     #     'Attack the monster in current position'
diff --git a/20240318/1/server.py b/20240318/1/server.py
index 3905718..69b4e43 100644
--- a/20240318/1/server.py
+++ b/20240318/1/server.py
@@ -114,20 +114,20 @@ class Game:
             broken = True
             print('Invalid arguments (count of elements)')
             response.append('1')
-            response.append('Invalid arguments (count of elements)')
+            # response.append('Invalid arguments (count of elements)')
 
         elif not isinstance(args[0], str):
             broken = True
             print('Invalid arguments (type of name)')
             response.append('2')
-            response.append('Invalid arguments (type of name)')
+            # response.append('Invalid arguments (type of name)')
 
         elif args[0] not in cowsay.list_cows() \
                 and args[0] != 'jgsbat':
             broken = True
             print('Cannot add unknown monster')
             response.append('3')
-            response.append('Cannot add unknown monster')
+            # response.append('Cannot add unknown monster')
         else:
             monster = {"name": args[0]}
 
@@ -138,7 +138,7 @@ class Game:
                             broken = True
                             print('Invalid arguments (type of message)')
                             response.append('4')
-                            response.append('Invalid arguments (type of message)')
+                            # response.append('Invalid arguments (type of message)')
                             break
                         monster["message"] = args[i+1]
                     case 'hp':
@@ -146,13 +146,13 @@ class Game:
                             broken = True
                             print('Invalid arguments (type of hp)')
                             response.append('5')
-                            response.append('Invalid arguments (type of hp)')
+                            # response.append('Invalid arguments (type of hp)')
                             break
                         if int(args[i+1]) <= 0:
                             broken = True
                             print('Invalid arguments (value of hp)')
                             response.append('6')
-                            response.append('Invalid arguments (value of hp)')
+                            # response.append('Invalid arguments (value of hp)')
                             break
                         monster["hp"] = int(args[i+1])
                     case 'coord':
@@ -160,27 +160,27 @@ class Game:
                             broken = True
                             print('Invalid arguments (type of coord x')
                             response.append('7')
-                            response.append('Invalid arguments (type of coord x')
+                            # response.append('Invalid arguments (type of coord x')
                             break
                         if int(args[i+1]) < 0 \
                                 or int(args[i+1]) >= self.field_size:
                             broken = True
                             print('Invalid arguments (value of coord x)')
                             response.append('8')
-                            response.append('Invalid arguments (value of coord x)')
+                            # response.append('Invalid arguments (value of coord x)')
                             break
                         if not args[i+2].isdigit():
                             broken = True
                             print('Invalid arguments (type of coord y')
                             response.append('9')
-                            response.append('Invalid arguments (type of coord y')
+                            # response.append('Invalid arguments (type of coord y')
                             break
                         if int(args[i+2]) < 0 \
                                 or int(args[i+2]) >= self.field_size:
                             broken = True
                             print('Invalid arguments (value of coord y)')
                             response.append('10')
-                            response.append('Invalid arguments (value of coord y)')
+                            # response.append('Invalid arguments (value of coord y)')
                             break
                         m_x = int(args[i+1])
                         m_y = int(args[i+2])
@@ -189,7 +189,11 @@ class Game:
         if not broken:
             print(f'Added monster {monster["name"]} to ({m_x}, {m_y}) saying {monster["message"]}')
             response.append('0')
-            response.append(f'Added monster {monster["name"]} to ({m_x}, {m_y}) saying {monster["message"]}')
+            response.append(monster["name"])
+            response.append(str(m_x))
+            response.append(str(m_y))
+            response.append(monster["message"])
+            # response.append(f'Added monster {monster["name"]} to ({m_x}, {m_y}) saying {monster["message"]}')
             
             key = self.key((m_x, m_y))
             if self.monsters.setdefault(key, None) != None:
@@ -325,6 +329,7 @@ def handler(conn, addr):
         while data := conn.recv(1024).decode():
             cmd, *args = shlex.split(data)
             print(addr, data)
+            print(args)
             match cmd:
                 case 'move':
                     method, *args = args
-- 
2.34.1

